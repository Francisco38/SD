package com.example.demo.repositories;

import java.util.*;

import org.springframework.data.repository.CrudRepository;

import com.example.data.Game;
import org.springframework.data.jpa.repository.Query;

public interface GameRepository extends CrudRepository<Game, Integer> {
    @Query(nativeQuery = true, value = "SELECT team.id as id,COUNT(case when team.id=game.team1Id or team.id=game.team2Id then 1 ELSE NULL END) as numberOfGames,COUNT(case when (team.id=game.team1Id and game.score1>game.score2) or (team.id=game.team2Id and game.score2>game.score1) then 1 ELSE NULL END) as wins,COUNT(case when (team.id=game.team1Id and game.score1<game.score2) or (team.id=game.team2Id and game.score2<game.score1) then 1 ELSE NULL END) as def, COUNT(case when (team.id=game.team1Id or team.id=game.team2Id) and game.score1=game.score2 then 1 ELSE NULL END) as emp, ROUND((avg(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END)),3) as goals,MAX(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END) From game,team GROUP BY team.id Order by team.id")
    public List<String> getStatsTeam();

    @Query(nativeQuery = true, value = "SELECT team.id as id,COUNT(case when team.id=game.team1Id or team.id=game.team2Id then 1 ELSE NULL END) as numberOfGames,COUNT(case when (team.id=game.team1Id and game.score1>game.score2) or (team.id=game.team2Id and game.score2>game.score1) then 1 ELSE NULL END) as wins,COUNT(case when (team.id=game.team1Id and game.score1<game.score2) or (team.id=game.team2Id and game.score2<game.score1) then 1 ELSE NULL END) as def, COUNT(case when (team.id=game.team1Id or team.id=game.team2Id) and game.score1=game.score2 then 1 ELSE NULL END) as emp, ROUND((avg(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END)),3) as goals,MAX(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END) From game,team GROUP BY team.id Order by numberOfGames")
    public List<String> getStatsTotal();

    @Query(nativeQuery = true, value = "SELECT team.id as id,COUNT(case when team.id=game.team1Id or team.id=game.team2Id then 1 ELSE NULL END) as numberOfGames,COUNT(case when (team.id=game.team1Id and game.score1>game.score2) or (team.id=game.team2Id and game.score2>game.score1) then 1 ELSE NULL END) as wins,COUNT(case when (team.id=game.team1Id and game.score1<game.score2) or (team.id=game.team2Id and game.score2<game.score1) then 1 ELSE NULL END) as def, COUNT(case when (team.id=game.team1Id or team.id=game.team2Id) and game.score1=game.score2 then 1 ELSE NULL END) as emp, ROUND((avg(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END)),3) as goals,MAX(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END) From game,team GROUP BY team.id Order by wins")
    public List<String> getStatsWins();

    @Query(nativeQuery = true, value = "SELECT team.id as id,COUNT(case when team.id=game.team1Id or team.id=game.team2Id then 1 ELSE NULL END) as numberOfGames,COUNT(case when (team.id=game.team1Id and game.score1>game.score2) or (team.id=game.team2Id and game.score2>game.score1) then 1 ELSE NULL END) as wins,COUNT(case when (team.id=game.team1Id and game.score1<game.score2) or (team.id=game.team2Id and game.score2<game.score1) then 1 ELSE NULL END) as def, COUNT(case when (team.id=game.team1Id or team.id=game.team2Id) and game.score1=game.score2 then 1 ELSE NULL END) as emp, ROUND((avg(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END)),3) as goals,MAX(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END) From game,team GROUP BY team.id Order by def")
    public List<String> getStatsLosses();

    @Query(nativeQuery = true, value = "SELECT team.id as id,COUNT(case when team.id=game.team1Id or team.id=game.team2Id then 1 ELSE NULL END) as numberOfGames,COUNT(case when (team.id=game.team1Id and game.score1>game.score2) or (team.id=game.team2Id and game.score2>game.score1) then 1 ELSE NULL END) as wins,COUNT(case when (team.id=game.team1Id and game.score1<game.score2) or (team.id=game.team2Id and game.score2<game.score1) then 1 ELSE NULL END) as def, COUNT(case when (team.id=game.team1Id or team.id=game.team2Id) and game.score1=game.score2 then 1 ELSE NULL END) as emp, ROUND((avg(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END)),3) as goals,MAX(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END) From game,team GROUP BY team.id Order by emp")
    public List<String> getStatsTie();

    @Query(nativeQuery = true, value = "SELECT team.id as id,COUNT(case when team.id=game.team1Id or team.id=game.team2Id then 1 ELSE NULL END) as numberOfGames,COUNT(case when (team.id=game.team1Id and game.score1>game.score2) or (team.id=game.team2Id and game.score2>game.score1) then 1 ELSE NULL END) as wins,COUNT(case when (team.id=game.team1Id and game.score1<game.score2) or (team.id=game.team2Id and game.score2<game.score1) then 1 ELSE NULL END) as def, COUNT(case when (team.id=game.team1Id or team.id=game.team2Id) and game.score1=game.score2 then 1 ELSE NULL END) as emp, ROUND((avg(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END)),3) as goals,MAX(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END) From game,team GROUP BY team.id Order by goals")
    public List<String> getStatsAvg();

    @Query(nativeQuery = true, value = "SELECT team.id as id,COUNT(case when team.id=game.team1Id or team.id=game.team2Id then 1 ELSE NULL END) as numberOfGames,COUNT(case when (team.id=game.team1Id and game.score1>game.score2) or (team.id=game.team2Id and game.score2>game.score1) then 1 ELSE NULL END) as wins,COUNT(case when (team.id=game.team1Id and game.score1<game.score2) or (team.id=game.team2Id and game.score2<game.score1) then 1 ELSE NULL END) as def, COUNT(case when (team.id=game.team1Id or team.id=game.team2Id) and game.score1=game.score2 then 1 ELSE NULL END) as emp, ROUND((avg(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END)),3) as goals,MAX(case when (team.id=game.team1Id) then game.score1 WHEN (team.id=game.team2Id) THEN game.score2 else 0 END) From game,team GROUP BY team.id Order by max")
    public List<String> getStatsGoals();

    @Query(nativeQuery = true, value = "SELECT COUNT(game.id) as numberOfGames,COUNT(case when (game.team1Id=?1 and game.score1>game.score2) or (game.team2Id=?1 and game.score2>game.score1) then 1 ELSE NULL END) as wins, COUNT(case when (game.team1Id=?1 and game.score1<game.score2) or (game.team2Id=?1 and game.score2<game.score1) then 1 ELSE NULL END) as def,  COUNT(case when game.score1=game.score2 then 1 ELSE NULL END) as emp,   Sum(case when (game.team1Id=?1) then game.score1 WHEN (game.team2Id=?1) then game.score2 else 0 END) as goals1, Sum(case when (game.team1Id=?2) then game.score1 WHEN (game.team2Id=?2) then game.score2 else 0 END) as goals2 From game where (game.team1Id=?1 and game.team2Id=?2) or (game.team2Id=?1 and game.team1Id=?2)")
    public String getTeamComp1(int d1, int d2);

    @Query(nativeQuery = true, value = "select COUNT(case when (game.team1Id=?1 and event.type=3) then 1 ELSE NULL END) as yellow1, COUNT(case when (game.team1Id=?1 and event.type=4) then 1 ELSE NULL END) as red1, COUNT(case when (game.team1Id=?2 and event.type=3) then 1 ELSE NULL END) as yellow2, COUNT(case when (game.team1Id=?2 and event.type=4) then 1 ELSE NULL END) as red2 From game,game_events,event where ((game.team1Id=?1 and game.team2Id=?2) or (game.team2Id=?1 and game.team1Id=?2)) and game.id=event.game_id and game_events.events_id=event.id")
    public String getTeamComp2(int d1, int d2);
}